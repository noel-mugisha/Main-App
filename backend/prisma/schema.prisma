// File: backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// A local, non-authoritative mirror of user data from the IdP.
// This schema is designed to fully support the frontend's data requirements.
model User {
  id              Int       @id // The ID comes from the JWT.
  email           String    @unique
  role            String
  emailVerified   Boolean   @map("email_verified")
  linkedinId      String?   @unique @map("linkedin_id") // Kept for potential future use
  createdAt       DateTime  @map("created_at")

  // Relations to other tables in this database
  projectsOwned   Project[] @relation("ManagerProjects")
  tasksAssigned   Task[]    @relation("AssignedTasks")

  @@map("users")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  managerId   Int
  manager     User     @relation("ManagerProjects", fields: [managerId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  status      TaskStatus @default(TODO)
  projectId   Int
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  Int?
  assignee    User?      @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}